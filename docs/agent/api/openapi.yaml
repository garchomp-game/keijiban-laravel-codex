openapi: 3.1.0
info:
  title: Keijiban API
  version: 0.1.0
  license:
    name: MIT
    url: https://opensource.org/license/mit/
servers:
  - url: https://api.keijiban.com/api
security:
  - cookieAuth: []
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: XSRF-TOKEN
  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string }
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, name, email, created_at, updated_at]
    Thread:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        user:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, title, user, created_at, updated_at]
    Post:
      type: object
      properties:
        id: { type: integer }
        body: { type: string }
        user:
          $ref: '#/components/schemas/User'
        thread_id: { type: integer }
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, body, user, thread_id, created_at, updated_at]
    Reaction:
      type: object
      properties:
        id: { type: integer }
        type: { type: string }
        user:
          $ref: '#/components/schemas/User'
        post_id: { type: integer }
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, type, user, post_id, created_at, updated_at]
    Error:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
        errors:
          oneOf:
            - type: object
            - type: 'null'
      required: [code, message]
    Paginated_Thread:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Thread'
        meta: { type: object }
      required: [data, meta]
    Paginated_Post:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        meta: { type: object }
      required: [data, meta]
    Paginated_Reaction:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
        meta: { type: object }
      required: [data, meta]
paths:
  /auth/register:
    post:
      operationId: authRegister
      security: []
      summary: Register
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      operationId: authLogin
      security: []
      summary: Login (sets cookie)
      responses:
        '204': { description: ok }
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/logout:
    post:
      operationId: authLogout
      summary: Logout
      responses:
        '204': { description: ok }
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    get:
      operationId: getCurrentUser
      summary: Current user
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /threads:
    get:
      security: []
      operationId: listThreads
      summary: List threads
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_Thread'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createThread
      summary: Create thread
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /threads/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: integer }
    get:
      security: []
      operationId: getThread
      summary: Get thread
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: updateThread
      summary: Update (owner only)
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteThread
      summary: Delete (owner only)
      responses:
        '204': { description: ok }
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /threads/{id}/posts:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: integer }
    get:
      security: []
      operationId: listPosts
      summary: List posts
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_Post'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createPost
      summary: Create post
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/reactions:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: integer }
    get:
      security: []
      operationId: listReactions
      summary: List reactions
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_Reaction'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createReaction
      summary: Create reaction
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteReaction
      summary: Delete my reaction
      responses:
        '204': { description: ok }
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
